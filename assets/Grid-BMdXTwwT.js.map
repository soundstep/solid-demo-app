{"version":3,"file":"Grid-BMdXTwwT.js","sources":["../../node_modules/.pnpm/@lightningjs+solid-primitives@0.6.6_@lightningjs+solid@0.16.0_solid-js@1.8.17/node_modules/@lightningjs/solid-primitives/dist/packages/createInfiniteItems.js","../../src/pages/gridStyles.ts","../../src/pages/Grid.tsx"],"sourcesContent":["/*\n * Copyright 2024 Comcast Cable Communications Management, LLC\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { batch, createComputed, createResource, createSignal, } from 'solid-js';\n// Adopted from https://github.com/solidjs-community/solid-primitives/blob/main/packages/pagination/src/index.ts\n// As we don't have intersection observer in Lightning, we can't use the original implementation\n/**\n * Provides an easy way to implement infinite items.\n *\n * ```ts\n * const [items, loader, { item, setItem, setItems, end, setEnd }] = createInfiniteScroll(fetcher);\n * ```\n * @param fetcher `(item: number) => Promise<T[]>`\n * @return `items()` is an accessor contains array of contents\n * @property `items.loading` is a boolean indicator for the loading state\n * @property `items.error` contains any error encountered\n * @method `page` is an accessor that contains page number\n * @method `setPage` allows to manually change the page number\n * @method `setItems` allows to manually change the contents of the item\n * @method `end` is a boolean indicator for end of the item\n * @method `setEnd` allows to manually change the end\n */\nexport function createInfiniteItems(fetcher) {\n    const [items, setItems] = createSignal([]);\n    const [page, setPage] = createSignal(0);\n    const [end, setEnd] = createSignal(false);\n    const [contents] = createResource(page, fetcher);\n    createComputed(() => {\n        const content = contents();\n        if (!content)\n            return;\n        batch(() => {\n            if (content.length === 0)\n                setEnd(true);\n            setItems((p) => [...p, ...content]);\n        });\n    });\n    return [\n        items,\n        {\n            page,\n            setPage,\n            setItems,\n            end,\n            setEnd,\n        },\n    ];\n}\n//# sourceMappingURL=createInfiniteItems.js.map","import {\n  IntrinsicNodeStyleProps,\n  IntrinsicTextNodeStyleProps,\n  hexColor,\n} from \"@lightningjs/solid\";\nimport theme from \"theme\";\n\nconst ROW_HEIGHT = 50;\nexport default {\n  ProductRow: {\n    width: 500,\n    display: \"flex\",\n    flexDirection: \"row\",\n    gap: 40,\n    height: ROW_HEIGHT,\n    borderRadius: 16,\n    color: 0xffffff0d,\n    border: { color: 0x008085ff, width: 0 },\n    active: {\n      color: 0x39393cff,\n    },\n    focus: {\n      color: 0xf6f6f9ff,\n      border: { color: 0x008085ff, width: 6 },\n    },\n    transition: {\n      // leave easing blank to use default linear\n      x: { duration: 300 },\n      width: { duration: 300 },\n      alpha: { duration: 300 },\n    },\n  },\n  ProductText: {\n    fontSize: 20,\n    fontWeight: 600,\n    lineHeight: 24,\n    color: hexColor(\"#f6f6f6\"),\n    focus: {\n      color: 0x141417ff,\n    },\n  },\n  itemsContainer: {\n    width: theme.layout.screenW,\n    height: 600,\n    y: 180,\n    x: 180,\n    zIndex: 2,\n  },\n} as const;\n","import {\n  createEffect,\n  on,\n  createSignal,\n  createSelector,\n  Index,\n  onMount,\n} from \"solid-js\";\nimport { type ElementNode, View, Text } from \"@lightningjs/solid\";\nimport { Column, Row } from \"@lightningjs/solid-ui\";\nimport styles from \"./gridStyles\";\nimport { setGlobalBackground } from \"../state\";\nimport { createInfiniteItems } from \"@lightningjs/solid-primitives\";\n\ninterface ProductsResponse {\n  limit: number;\n  products: any[]; // You can replace 'any' with the actual type of your products\n  skip: number;\n  total: number;\n}\n\ninterface Product {\n  brand: string;\n  category: string;\n  description: string;\n  discountPercentage: number;\n  id: number;\n  images: string[];\n  price: number;\n  rating: number;\n  stock: number;\n  thumbnail: string;\n  title: string;\n}\n\nfunction ProductRow(props) {\n  return (\n    <View\n      y={props.y}\n      autofocus={props.autofocus}\n      style={styles.ProductRow}\n      forwardStates\n    >\n      <Text style={styles.ProductText}>{props.item.id}</Text>\n      <Text style={styles.ProductText}>{props.item.title}</Text>\n      <Text style={styles.ProductText}>{props.item.price}</Text>\n    </View>\n  );\n}\n\nconst Grid = () => {\n  let totalProducts = 100;\n  const [columnY, setcolumnY] = createSignal(0);\n  const isFirst = createSelector(() => 0);\n  const [rowIndex, setRowIndex] = createSignal(0);\n  const [items, setItems] = createSignal<Product[]>([]);\n  const [products, { setPage }] = createInfiniteItems<Product>((page) => {\n    return fetch(`https://dummyjson.com/products?limit=20&skip=${20 * page}`)\n      .then((res) => res.json())\n      .then((data: ProductsResponse) => {\n        totalProducts = data.total;\n        return data.products;\n      });\n  });\n\n  const EXTRA = 8;\n  // When rowIndex changes we create a sub array for the UI\n  createEffect(\n    on(\n      [products, rowIndex],\n      ([products, index]) => {\n        if (items().length - EXTRA > index) return;\n\n        setItems(products.slice(0, index + EXTRA));\n        if (index > products.length - 5) {\n          // Load more products\n          setPage((p) => p + 1);\n        }\n      },\n      { defer: true },\n    ),\n  );\n\n  onMount(() => {\n    setGlobalBackground(\"#000000\");\n  });\n\n  function changeRow(elm, active, selectedIndex, lastSelectedIndex) {\n    setcolumnY((active.y || 0) * -1 + 50);\n    setRowIndex(selectedIndex);\n  }\n\n  return (\n    <View clipping style={styles.itemsContainer}>\n      <Column plinko y={columnY()} scroll=\"none\" onSelectedChanged={changeRow}>\n        <Index each={items()}>\n          {(item, i) => (\n            <ProductRow y={i * 50} item={item()} autofocus={isFirst(i)} />\n          )}\n        </Index>\n      </Column>\n    </View>\n  );\n};\n\nexport default Grid;\n"],"names":["createInfiniteItems","fetcher","items","setItems","createSignal","page","setPage","end","setEnd","contents","createResource","createComputed","content","batch","p","ROW_HEIGHT","styles","hexColor","theme","ProductRow","props","_$createComponent","View","y","autofocus","style","forwardStates","children","Text","ProductText","item","id","title","price","Grid","columnY","setcolumnY","isFirst","createSelector","rowIndex","setRowIndex","products","fetch","then","res","json","data","total","EXTRA","on","index","length","slice","defer","onMount","setGlobalBackground","changeRow","elm","active","selectedIndex","lastSelectedIndex","clipping","itemsContainer","Column","plinko","scroll","onSelectedChanged","Index","each","i"],"mappings":"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","x_google_ignoreList":[0]}